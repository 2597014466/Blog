# 1.应用启动流程


应用进程不存在的情况下，从点击桌面应用图标，到应用启动（冷启动），大概会经历以下流程：



- Launcher startActivity

- AMS startActivity

- Zygote fork 进程

- ActivityThread main()
4.1.  ActivityThread attach
4.2. handleBindApplication
4.3  attachBaseContext
4.4. installContentProviders
4.5. Application onCreate

- ActivityThread 进入loop循环

- Activity生命周期回调，onCreate、onStart、onResume...



>整个启动流程我们能干预的主要是 4.3、4.5 和6，应用启动优化主要从这三个地方入手。理想状况下，这三个地方如果不做任何耗时操作，那么应用启动速度就是最快的，但是现实很骨感，很多开源库接入第一步一般都是在Application onCreate方法初始化，有的甚至直接内置ContentProvider，直接在ContentProvider中初始化框架，不给你优化的机会。

# 2.启动优化


直奔主题，常见的启动优化方式大概有这些：



- 闪屏页优化

- MultipDex优化（本文重点）

- 第三方库懒加载

- WebView优化

- 线程优化

- 系统调用优化

#### **2.2.1 apk编译流程**

Android Studio 按下编译按钮后发生了什么？

1.  打包资源文件，生成R.java文件（使用工具AAPT）

2.  处理AIDL文件，生成java代码（没有AIDL则忽略）

3.  编译 java 文件，生成对应.class文件（java compiler）

4.  .class 文件转换成dex文件（dex）

5.  打包成没有签名的apk（使用工具apkbuilder）

6.  使用签名工具给apk签名（使用工具Jarsigner）

7.  对签名后的.apk文件进行对齐处理，不进行对齐处理不能发布到Google Market（使用工具zipalign）

在第4步，将class文件转换成dex文件，默认只会生成一个dex文件，单个dex文件中的方法数不能超过65536，不然编译会报错：

> Unable to execute dex: method ID not in [0, 0xffff]: 65536

App集成一堆库之后，方法数一般都是超过65536的，解决办法就是：一个dex装不下，用多个dex来装，gradle增加一行配置即可。

> multiDexEnabled true

这样解决了编译问题，在5.0以上手机运行正常，但是5.0以下手机运行直接crash，报错 Class NotFound xxx。

Android 5.0以下，ClassLoader加载类的时候只会从class.dex（主dex）里加载，ClassLoader不认识其它的class2.dex、class3.dex、...，当访问到不在主dex中的类的时候，就会报错:Class NotFound xxx，因此谷歌给出兼容方案，MultiDex。


#### **2.2.3 MultiDex 原理**

如果虚拟机本身就支持加载多个dex文件，那就啥都不用做；如果是不支持加载多个dex（5.0以下是不支持的），则走到 doInstallation 方法。

查找dex文件，有两个逻辑，有缓存就调用 loadExistingExtractions 方法，没有缓存或者缓存读取失败就调用 performExtractions 方法，然后再缓存起来。使用到缓存，那么performExtractions 方法想必应该是很耗时的，分析一下代码：


**解压 apk 的逻辑：遍历出里面的 dex文件，例如class1.dex，class2.dex，然后又压缩成 class1.zip，class2.zip...，然后返回 zip 文件列表。**

**思考为什么这里要压缩呢？后面涉及到 ClassLoader 加载类原理的时候会分析 ClassLoader 支持的文件格式。**

第一次加载才会执行解压和压缩过程，第二次进来读取 sp 中保存的 dex 信息，直接返回 file list，所以第一次启动的时候比较耗时。

 dex 文件列表找到了，然后调用 installSecondaryDexes 方法进行安装，怎么安装呢？方法点进去看 SDK 19 以上的实现

1\. 反射 ClassLoader 的 pathList 字段

2\. 找到 pathList 字段对应的类的 makeDexElements 方法

3\. 通过 MultiDex.expandFieldArray  这个方法扩展 dexElements 数组，怎么扩展？看下代码：


就是创建一个新的数组，把原来数组内容（主 dex）和要增加的内容（dex2、dex3...）拷贝进去，反射替换原来的 dexElements 为新的数组，如下图

![image](https://upload-images.jianshu.io/upload_images/13559775-4865f3eeed8e5ceb?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)

看起来有点眼熟，Tinker 热修复的原理也是通过反射将修复后的 dex 添加到这个 dex 数组去，不同的是热修复是添加到数组最前面，而 MultiDex 是添加到数组后面。这样讲可能还不是很好理解？来看看 ClassLoader 怎么加载一个类的就明白了~

#### **2.2.4  ClassLoader 加载类原理**

不管是 PathClassLoader 还是 DexClassLoader，都继承自 BaseDexClassLoader，加载类的代码在 BaseDexClassLoader中


dex2、dex3...通过makeDexElements方法转换成要新增的Element数组，**最后一步就是反射DexPathList的dexElements字段，将原来的Element数组和新增的Element数组合并，然后反射赋值给dexElements变量，最后DexPathList的dexElements变量就包含我们新加的dex在里面了。**

makeDexElements方法会判断file类型，上面讲dex提取的时候解压apk得到dex，然后又将dex压缩成zip，压缩成zip，就会走到第二个判断里去。仔细想想，其实dex不压缩成zip，走第一个判断也没啥问题吧，那谷歌的MultiDex为什么要将dex压缩成zip呢？
