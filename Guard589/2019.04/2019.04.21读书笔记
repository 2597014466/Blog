# Android自定义轻量级Tab指示器Indicator
## 目录:
[1.  轻量的指示器](#1)
[2. 导入第三方指示器](#2)
[3. 封装的Tab指示器 ](#3)
[4. 指示器的属性](#4)

###  <span id = "1">**1. 轻量的指示器**</span>

Android开发中经常碰到tabLayout和viewpager配合实现
如果碰到的场景并不需要viewpager，只是想要一个轻量的指示器，可以用很少的代码自己实现。效果如下

```
import android.content.Context;
import android.graphics.Canvas;
import android.graphics.Paint;
import android.graphics.RectF;
import android.support.annotation.Nullable;
import android.util.AttributeSet;
import android.util.TypedValue;
import android.view.View;
import android.widget.Scroller;

public class TabStrip extends View {
    private Paint mPaint;
    private Scroller mScroller;

    private int mIndicatorCenterX;
    private int mIndicatorWidth = 25;
    private int mIndicatorHeight = 2;
    private RectF mIndicatorRect;
    private int ANIM_DURATION = 500;
    private int mRadius = 5;

    public TabStrip(Context context) {
        this(context, null);
    }

    public TabStrip(Context context, @Nullable AttributeSet attrs) {
        this(context, attrs, 0);
    }

    public TabStrip(Context context, @Nullable AttributeSet attrs, int defStyleAttr) {
        super(context, attrs, defStyleAttr);
        init();
    }

    private void init() {
        mPaint = new Paint(Paint.ANTI_ALIAS_FLAG);
        mPaint.setStrokeWidth(5);
        mPaint.setColor(0xFFFF5777);
        mScroller = new Scroller(getContext());
        mIndicatorRect = new RectF();
    }

    @Override
    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
        super.onMeasure(widthMeasureSpec, MeasureSpec.makeMeasureSpec(dp2px(mIndicatorHeight), MeasureSpec.EXACTLY));
    }

    public void smoothScrollTo(int destX) {
        smoothScrollTo(destX, ANIM_DURATION);
    }

    public void smoothScrollTo(int destX, int duration) {
        int finalX = mScroller.getFinalX();
        int deltaX = destX - finalX;
        mScroller.startScroll(finalX, 0, deltaX, 0, duration);
        invalidate();
    }

    public void setIndicatorPosition(int x) {
        smoothScrollTo(x, 1);
    }

    @Override
    public void computeScroll() {
        if (mScroller.computeScrollOffset()) {
            mIndicatorCenterX = mScroller.getCurrX();
            invalidate();
        }
    }

    private int dp2px(int dp) {
        return (int) TypedValue.applyDimension(
                TypedValue.COMPLEX_UNIT_DIP, dp, getContext().getResources().getDisplayMetrics()
        );
    }

    @Override
    protected void onDraw(Canvas canvas) {
        super.onDraw(canvas);
        // 画指示器
        mIndicatorRect.left = mIndicatorCenterX - dp2px(mIndicatorWidth) / 2;
        mIndicatorRect.right = mIndicatorCenterX + dp2px(mIndicatorWidth) / 2;
        mIndicatorRect.top = 0;
        mIndicatorRect.bottom = dp2px(mIndicatorHeight);
        canvas.drawRoundRect(mIndicatorRect, dp2px(mRadius), dp2px(mRadius), mPaint);
    }
}

```

其实只需要看`smoothScrollTo` `computeScroll` `onDraw` 三个方法
Scroller跟插值器有点像，可以想象它是一个特定时间特定距离的滑动的数据表示，可以通过它获取某个时间点的滑动信息。
**这里的调用关系是:**
**`smoothScrollTo -> invalidate->onDraw->computeScroll-> invalidate-> onDraw->computeScroll->invalidate-> onDraw->....`**
关键在于onDraw会调用`computeScroll`，`computeScroll`又会用`invalidate`刷新导致onDraw被调用，而每次onDraw中画指示条的时候的位置由`scroller.getcurrentX()`提供，整个循环调用由`mScroller.computeScrollOffset()`控制退出。当设定的滑动完成后，`computeScrollOffset`返回***true***退出不断重绘的循环。
由于使用scroller可以实时得到当前的滑动位置，哪怕是在某次指示条还在滑向某个指定tab的滑动过程又点了另一个tab，`smoothScrollTo`设定了新的滑动动作之后指示条也可以从半路开始滑向新的tab，动画不会中断。

这里实现了一个可以滑动的Indicator，只需要在适当的时候调用`smoothScrollTo`，就可以跟其他内容组合起来，起到指示器的作用.


###  <span id = "2">**2.如何导入第三方的指示器 **</span>

 [详细内容可以参考](https://github.com/LillteZheng/ViewPagerHelper)
这里用的是 jitpack 这个网站，所以：

```
allprojects {
    repositories {
        ...
        maven { url 'https://jitpack.io' }
    }
}

```

然后在你的 module 中添加：

```
compile 'com.github.LillteZheng:ViewPagerHelper:v1.3'
```

###  <span id = "3">**3. 封装的Tab指示器:**</span>

可以通过设置属性值，自由配置三角形，条状，或者只使用文字颜色变化，自定义属性的名字跟它的功能一样。 TabIndicator 默认支持滚动，也可以设置不可滚动； 三角形参考布局如下：
```
<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    android:id="@+id/activity_fragment_page"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical"
    tools:context="com.zhengsr.viewpagerhelper.tab.TabActivity">

    <com.zhengsr.viewpagerlib.indicator.TabIndicator
        android:id="@+id/line_indicator"
        android:layout_width="wrap_content"
        android:layout_height="50dp"
        android:background="@color/black_ff"
        app:tab_color="@color/white"
        app:tab_width="25dp"
        app:tab_height="5dp"
        app:tab_text_default_color="@color/white_ff"
        app:tab_text_change_color="@color/white"
        app:tab_show="true"
        app:tab_text_type="normaltext"
        app:tab_textsize="16sp"
        app:visiabel_size="3"
        app:tap_type="tri"
        >
    </com.zhengsr.viewpagerlib.indicator.TabIndicator>

    <android.support.v4.view.ViewPager
        android:id="@+id/viewpager"
        android:layout_width="match_parent"
        android:background="@color/gray_cccc"
        android:layout_height="wrap_content"/>
</LinearLayout>
```

代码这样配置把 TabIndicator 跟viewpager关联起来:

```
    /**
     * 把 TabIndicator 跟viewpager关联起来
     */
    TabIndicator tabIndecator = (TabIndicator) findViewById(R.id.line_indicator);
    // 设置 viewpager的切换速度，这样点击的时候比较自然
    tabIndecator.setViewPagerSwitchSpeed(viewPager,600);
    tabIndecator.setTabData(viewPager,mTitle, new TabIndicator.TabClickListener() {
        @Override
        public void onClick(int position) {
            //顶部点击的方法公布出来
            viewPager.setCurrentItem(position);
        }
    });

```

这样，一个比较好用的viewpager 加指示器的方式就完成了。


###  <span id = "4">**4. 指示器的属性：**</span>
下面可以看一下自定义的属性，方便大家在用的时候调用如**顶部 viewpager指示器 TabIndicator**

名称	|类型|	说明
---------  | -------------|-------
visiabel_size|	integer	|可视化个数，比如有一排，我们就只要显示4个
tab_color	|color,reference|	指示器的颜色
tab_show	|boolean|	是否显示指示器
tab_text_type|	normaltext,colortext	|顶部文字的类型，nromaltext为普通的textview，corlortext为文件渐变
tab_width|	dimension|	指示器的宽度
tab_height|	dimension|	指示器的高度
tab_textsize|	dimension|	顶部文字的大小
tab_text_default_color|	color,reference|	顶部文字默认的颜色
tab_text_change_color|	color,reference|	移动时，顶部文字的颜色
tap_type|	tri,rect|	指示器类型，有三角形或者圆条
tab_iscanscroll|	boolean	|指示器是否支持滚动
