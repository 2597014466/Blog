# 第3章 View的事件体系（二）

@(Android开发艺术探索)

## 3.4 View 的事件分发机制

### 3.4.1 点击事件的传递过程

所谓点击事件的分发，其实就是对 MotionEvent 事件的分发过程，即当一个 MotionEvent 产生了以后，系统需要把这个事件传递给一个具体的 View，而这个传递的过程就是分发的过程。点击事件的分发过程由三个很重要的方法共同完成：dispatchTouchEvent，onInterceptTouchEvent 和 onTouchEvent：

- **public boolean dispatchTodiuchEvent (MotionEvent ev)**
用来进行事件的分发。如果事件能够传递给当前 View，那么此方法一定会被调用，返回结果收到当前 View 的 onTouchEvent 和下级 View 的 dispatchTouchEvent 方法的影响，表示是否消耗此事件

- **public boolean onInterceptTouchEvent (MotionEvent ev)**
在上述方法的内部调用，用来判断是否拦截该某个事件，如果当前 View 拦截了某个事件，那么在**同一个事件序列**当中，此方法不会再次被调用，返回结果表示是否拦截当前事件

- **public boolean onTouchEvent (MotionEvent ev)**
在 dispatchTodiuchEvent 方法中调用，用来处理点击事件，返回结果表示是否消耗当前事件，如果不消耗，在同一个事件序列中，当前 View 无法再次接收到事件

上面三个方法可以用如下的伪代码表示：
```
public boolean dispatchTodiuchEvent (MotionEvent ev) {
	boolean consume = false;
	if (onInterceptTouchEvent(ev)) {
		consume = onTouchEvent(ev);
	} else {
		consume = child.dispatchTouchEvent(ev);
	}
	return consume;
}
```

通过上面的伪代码，我们也可以大致了解点击事件的传递规则：
1. 对于一个根 ViewGroup 来说，点击事件产生后，首先会传递给它，这时它的 dispatchTodiuchEvent 就会被调用
2. 如果这个 ViewGroup 的 onInterceptTouchEvent 方法返回 true 就表示他要拦截当前事件，接着事件就会交给这个 ViewGroup 处理，即它的 onTouchEvent 会被调用；
3. 如果这个 ViewGroup 的 onInterceptTouchEvent 方法返回 false 就表示他不拦截当前事件，这时当前事件就会继续传递给它的子元素，接着子元素的 dispatchTodiuchEvent 方法会被调用，
4. 如此反复直到事件被最终处理

当一个 View 需要处理事件时，如果它设置了 OnTouchListener，那么 OnTouchListener 中的 onTouch 方法会被回调。这时事件如何处理还要看 onTouchEvent 的返回值，如果返回 false，则当前 View 的 onTouchEvent 方法会被调用；如果返回 true，那么 onTouchEvent 会被调用。由此可见，**给 View 设置的 OnTouchListener，其优先级比 onTouchEvent 高**。在 onTouchEvent 方法中，如果当前设置的有 OnClickListener，那么它的 onClick 方法会被调用。可以看出，**平时我们常用的 OnClickListener，其优先级最低，即处于事件传递的尾端**

当一个点击事件产生后，他的传递过程遵循如下顺序：**Activity->Window->View**，即事件总是先传递给 Activity，Activity 再传递给 Window，最后 Window 再传递给顶级 View，顶级 View 接收到事件后，就会按照事件分发机制去分发事件。考虑一种情况，如果一个 View 的 onTouchEvent 返回 false，那么它的父容器的 onTouchEvent 将会被调用，以此类推，如果所有的元素都不处理这个事件，那么这个事件将会最终传递给 Activity 处理，即 Activity 的 onTouchEvent 方法会被调用

关于事件传递的机制，这里给出一些结论，根据这些结论可以更好的理解整个传递过程：

1. **同一个事件序列是指从手指接触屏幕的那一刻起，到手指离开屏幕的那一刻结束**，这个过程中所产生的一系列事件，这个事件序列以 down 事件开始，中间含有数量不定的 move 事件，最终以 up 事件结束
2. 正常情况下，**一个事件序列只能被一个 View 拦截且消耗**。这一条的原因可以参考第3条，因为一旦一个元素拦截了此事件，那么同一个事件序列内的所有事件都会直接交给它处理，因此同一个事件序列不能分别由两个 View 同时处理，但是通过特殊手段可以做到，比如一个 View 将本该自己处理的事件通过 onTouchEvent 强行传递给其他 View 处理
3. **某个 View 一旦决定拦截，那么这一个事件序列都只能由它来处理，并且它的 onInterceptTouchEvent 不会再被调用**。这条也很好理解，就是说当一个 View 决定拦截一个事件后，那么系统会把同一个事件序列内的其他方法都直接交给它处理，因此就不用再调用这个 View 的 onInterceptTouchEvent 去询问它是否要拦截了 。
4. **某一个 View 一旦开始处理事件，如果它不消耗 ACTION_DOWN 事件（onTouchEvent 返回 false），那么同一个事件序列中的其他方法都不会再交给它处理，并且事件将重新交给它的父元素去处理，即父元素的 onTouchEvent 会被调用**。意思就是事件一旦交给一个 View 处理，那么它必须消耗掉，否则同一个事件序列中剩下的事件就不再交给它来处理了。
5. 如**果 View 不消耗除 ACTION_DOWN 以外的其他事件，那么这个点击事件会消失，此时父元素的 onTouchEvent 并不会被调，并且当前 View 可以持续收到后续的的事件，最终这些消失的点击事件会传递给 Activity 处理**
6. **ViewGroup 默认不拦截任何事件**。
7. **View 没有 onInterceptTouchEvent 方法，一旦有点击事件传递给它，那么它的 onTouchEvent 方法就会被调用**
8. **View 的 onTouchEvent 默认都会消耗事件，除非它是不可点击的（clickable 和 lonClickable 同时为 false）**
9.  View 的 enable 属性不影响 onTouchEvent 的默认返回值。哪怕一个 View 是 disable 状态的，只要它的 clickable 和 lonClickable 有一个为 true，那么它的 onTouchEvent 就返回 true
10.  onClick 会发生的前提是当前 View 是可点击的，并且他收到了down 和 up 的事件
11.  事件传递过程是由外向内的，即事件总是先传递给父元素，然后再由父元素分发给子 View，通过 requestDisallowInterceptTouchEvent 方法可以在子元素中干预父元素的事件分发过程，但是 ACTION_DOWN 事件除外
